survey 						:= [ \t\r\n]*, (assignmentRight / assignmentLeft / ("[[", [ \t\r\n]*, widget, [ \t\r\n]*, "]]"), [ \t\r\n]*)*
widget 						:= ("if", [ \t\r\n]+, condition) / "endif" / "else" / ("elseif", [ \t\r\n]+, condition) / pipedExpr
assignmentRight				:= "[[", [ \t\r\n]*, widget, [ \t\r\n]*, "]]", [ \t\r\n]*, ">>", [ \t\r\n]*, varId, [ \t\r\n]+
assignmentLeft				:= varId, "<<", (( "[[", [ \t\r\n]*, widget, [ \t\r\n]*, "]]") / tupleWithLists / listWithTuples / iterator / datasource / string / number / varId )
pipedExpr					:= widgetArg, ([ \t\r\n]*, "|", [ \t\r\n]*, widgetArg)*
widgetArg					:= (id, [ \t\r\n]*, "=")?, [ \t\r\n]*, ( tupleWithLists / listWithTuples / iterator / datasource / string / number / varId )
listWithTuples				:= "[", [ \t\r\n]*, listWithTuplesElement, ( [ \t\r\n]*, ",", [ \t\r\n]*, listWithTuplesElement )*, [ \t\r\n]*, "]"
listWithTuplesElement		:= tupleWithoutLists / string / number / varId
listWithoutTuples			:= "[", [ \t\r\n]*, listWithoutTuplesElement,  ( [ \t\r\n]*, ",", [ \t\r\n]*, listWithoutTuplesElement )*, [ \t\r\n]*, "]"
listWithoutTuplesElement	:= string / number / varId
tupleWithLists				:= "(", [ \t\r\n]*, tupleWithListsElement, ( [ \t\r\n]*, ",", [ \t\r\n]*, tupleWithListsElement)*, [ \t\r\n]*, ")"
tupleWithListsElement		:= (id, [ \t\r\n]*, "=", [ \t\r\n]* )?, (listWithoutTuples / string / number / varId)
tupleWithoutLists			:= "(", [ \t\r\n]*, tupleWithoutListsElement, ( [ \t\r\n]*, ",", [ \t\r\n]*, tupleWithoutListsElement )*, [ \t\r\n]*, ")"
tupleWithoutListsElement	:= (id, [ \t\r\n]*, "=", [ \t\r\n]* )?, ( string / number / varId )
iterator					:= "iterator", "(", iteratorArg, (",", iteratorArg)*, ")"
iteratorArg					:= datasource / string / number / varId
datasource					:= "datasource", "(", datasourceArg, (",", datasourceArg)*, ")"
datasourceArg				:= string / number / varId
id							:= [A-Za-z], [A-Za-z0-9]*
varId						:= [A-Za-z], [A-Za-z0-9]*
number						:= "-"?, ( "0" / ([1-9], [0-9]*) ), ( ("." / ","), [0-9]+ )?
string						:= "\x22", ( stringConditional / "\x5C\x22" / -"\x22" )+, "\x22"
stringConditional			:= "{{", [ \t\r\n]*, condition, [ \t\r\n]*, "|", [ \t\r\n]*, string, [ \t\r\n]*, ( [ \t\r\n]*, "|", [ \t\r\n]*, string, [ \t\r\n]* )?,"}}"
condition					:= "1==1"
